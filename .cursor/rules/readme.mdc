---
description: 
globs: 
alwaysApply: true
---
# 🛠️ Next.js + Supabase 기반 프로젝트 폴더 리팩토링 가이드

이 문서는 기존 `src/app` 기반의 구조를 도메인 중심 + 토스 코드 퀄리티 기준에 따라 재구성하기 위한 리팩토링 매뉴얼입니다.  
Supabase, React Query, Zustand, Next.js App Router 등을 사용하는 프로젝트에 최적화되어 있습니다.

---

## 📦 리팩토링 목적

- 관심사 분리 (components, hooks, types 등)
- 도메인 기반 폴더 구조로 응집도 강화
- 공통 모듈 분리 (shared/*)
- 코드 가독성 및 유지보수성 향상
- **API 라우트를 제거하고 서버 액션 기반으로 재구성**

---

## 🧱 기존 구조 예시

```txt
src/app/
├── auth/
├── boards/
├── shop/
├── components/
├── hooks/
├── context/
├── utils/
├── types/
├── layout.tsx
├── page.tsx
└── RootLayoutClient.tsx
```

---

## ✅ 추천 구조 (도메인 기반 + 서버 액션)

```txt
src/
├── app/                         # Next.js App Router (경로 중심)
│   ├── layout.tsx
│   ├── page.tsx
│   └── RootLayoutClient.tsx
├── domains/
│   ├── auth/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── actions.ts         # ✅ 서버 액션만 사용
│   │   └── types/
│   ├── boards/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── actions.ts         # ✅ 기존 API 제거
│   │   └── types/
│   └── livescore/
│       ├── match/
│       ├── team/
│       └── player/
├── shared/
│   ├── components/
│   ├── hooks/
│   ├── utils/
│   ├── constants/
│   ├── context/
│   └── api/
│       └── supabase.ts        # ✅ supabase 클라이언트만 유지
├── styles/
│   └── globals.css

구조는 참고만하고 기존에 구성되어있던 페이지, 컴포넌트등 구현해야함 아래에 기존 구조에 대한 설명이 참고 되어있습니다.
```

---

## ⛏ 자동 리팩토링 스크립트 (bash)

```bash
#!/bin/bash

# 도메인 폴더 생성
mkdir -p src/domains/boards/{components,hooks,types}
mkdir -p src/domains/auth/{components,hooks,types}
mkdir -p src/domains/shop/{components,services,types}
mkdir -p src/shared/{components,hooks,utils,constants,context,api}

# 공통 모듈 이동
mv src/app/utils/* src/shared/utils/ 2>/dev/null
mv src/app/hooks/* src/shared/hooks/ 2>/dev/null
mv src/app/constants/* src/shared/constants/ 2>/dev/null

# 도메인 예시 이동 (실제 파일명에 맞게 조정 필요)
mv src/app/boards/* src/domains/boards/components/ 2>/dev/null
mv src/app/auth/* src/domains/auth/components/ 2>/dev/null
mv src/app/shop/* src/domains/shop/components/ 2>/dev/null

echo "✅ 구조 리팩토링 완료: domains/ & shared/ 정리됨!"
```

> 💡 기존 `api/` 디렉토리는 제거하고, 모든 API 호출은 `server action`으로 대체합니다.

---

## 🧠 도메인 예시 구조 (`boards`)

```txt
src/domains/boards/
├── components/
├── hooks/
├── actions.ts         # ✅ 서버에서 실행되는 액션
├── types/
└── index.ts
```
# 📦 프로젝트 폴더 구조 설명서 (기존 구조 기준)

> 프로젝트 위치: `src/app/`  
> 목적: 폴더별 역할 및 구조 파악  
> 참고 기준: 토스 프론트엔드 코드 품질 가이드

---

## 📁 디렉토리 트리 구조

```txt
src/app/
├── actions/            # 게시판 등 일부 기능 관련 액션들 (추정)
├── admin/              # 관리자 UI 또는 페이지
├── api/                # API 호출 관련 코드
├── auth/               # 로그인/회원가입 등 인증 관련
├── boards/             # 게시판 기능 관련 뷰 및 로직
├── components/         # 전역 UI 컴포넌트 (헤더, 버튼 등 추정)
├── constants/          # 공통 상수 정의
├── context/            # React Context 기반 전역 상태
├── data/               # 정적 또는 mock 데이터 (RLS 정책 언급됨)
├── help/               # 비밀번호찾기, 아이디찾기 로직직
├── hooks/              # 전역 커스텀 훅 모음
├── lib/                # 기타 라이브러리/헬퍼 (일반 유틸류)
├── livescore/
│   └── football/       # 축구 라이브스코어 관련 기능
├── services/           # 비즈니스 로직, API wrapper 등
├── settings/           # 설정 페이지 혹은 기능
├── shop/               # 상점 관련 기능
├── shorts/             # 짧은 콘텐츠? (Shorts 기능)
├── types/              # 전역 타입 정의 (.d.ts 등)
├── ui/                 # 스타일링된 UI 컴포넌트 모음? (초기 상태)
├── utils/              # 전역 유틸 함수
├── RootLayoutClient.tsx # 클라이언트 레이아웃 컴포넌트
├── layout.tsx          # 루트 layout (Next.js app router용)
├── page.tsx            # 루트 페이지
├── dynamic.ts          # 다이나믹 import 관련 유틸?
└── globals.css         # 글로벌 스타일 시트
```

---

## 📌 폴더별 역할 요약

| 폴더명 | 설명 |
|--------|------|
| `auth/` | 로그인, 회원가입 등 인증 관련 컴포넌트 |
| `boards/` | 게시판 관련 기능 |
| `shop/` | 상품 구매 또는 포인트 상점 등 상점 기능 |
| `admin/` | 관리자 전용 UI |
| `components/` | 전역에서 사용되는 UI 컴포넌트들 |
| `hooks/` | 공통 훅 (예: useAuth, useToast 등) |
| `utils/`, `lib/` | 유틸리티 함수. 둘의 구분이 모호하므로 통합 필요 가능성 |
| `api/`, `services/` | API 호출 or 비즈니스 로직 모듈 |
| `constants/` | 숫자, 문자열 상수 등 |
| `context/` | 전역 상태 컨텍스트 (Auth, Theme 등) |
| `types/` | 전역 타입 선언 |
| `ui/` | UI 컴포넌트 기반 시스템 (아직 초기 상태) |
| `livescore/football/` | 실시간 축구 점수 관련 기능 |
| `shorts/` | 쇼츠 콘텐츠 관련 페이지 |
| `data/` | mock or 정책 기반 정적 데이터 |

---

```ts 
// any 타입 빠르게 정리하세요 여러번 수정하지말고
// actions.ts (예시)
'use server'

import { supabase } from '@/shared/api/supabase'

export async function createBoard(data: { title: string; content: string }) {
  const { error } = await supabase.from('boards').insert(data)
  if (error) throw new Error(error.message)
}
```

---

## 💡 경로 설정 (tsconfig.json)

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@app/*": ["src/app/*"],
      "@domains/*": ["src/domains/*"],
      "@shared/*": ["src/shared/*"]
    }
  }
}
```

---

## 🧬 Supabase + Server Action 연동 가이드

- `src/shared/api/supabase.ts`에 클라이언트 인스턴스 관리
- 모든 서버 로직은 `domains/*/actions.ts`로 이동
- `use server` 선언 필수 (`'use server'`)
- 클라이언트 컴포넌트에서 직접 호출 가능
- SSR 대응용 `createServerComponentClient`는 `shared/api/supabaseServer.ts`에 구성

---

## 🧹 API 제거 체크리스트

- [x] `src/app/api/` 디렉토리 삭제
- [x] `GET`, `POST` 라우트 대신 서버 액션 함수로 전환
- [x] 클라이언트 컴포넌트에서 `actions.ts` 함수 직접 호출
- [x] 로딩/에러/성공 상태는 클라이언트에서 UI 처리

---

## 📌 추가 추천

- [ ] `shared/hooks`에 `useToast`, `useQueryParam` 등 글로벌 훅 모음
- [ ] `shared/components`에 `Modal`, `Spinner`, `Button` 등 기본 UI 컴포넌트 정리
- [ ] `shared/constants`에 `ROUTES`, `ERROR_MESSAGES`, `ANIMATION_DELAY_MS` 등 상수 정리
- [ ] `shared/utils`에 날짜 포매팅, 정렬, 필터링 등 로직 배치

---

## 🏁 마무리

이 구조는 **토스 코드 품질 가이드**와 **Next.js App Router 권장 패턴**, 그리고 **Supabase 서버 중심 아키텍처**에 맞춰 최적화된 구조입니다.  
점진적 리팩토링을 통해 생산성과 유지보수성을 모두 확보할 수 있습니다.

> 참고 문서  
> - [토스 Cursor Rule Gist](https://gist.github.com/toy-crane/dde6258997519d954063a536fc72d055)  
> - [토스 코드 퀄리티 가이드](https://frontend-fundamentals.com/code-quality/code/)  
> - [Next.js 서버 액션 공식문서](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions)



1. **프로젝트 구조**:
   - 전통적인 Next.js App Router 기반으로 `src/app` 디렉토리에 주요 코드 위치
   - 일부 도메인 기반 구조(`src/domains`)가 도입되었으나 완전히 마이그레이션되지 않음
   - Supabase를 백엔드로 사용 중이며 현재 일부 API 라우트 사용

2. **문제점**:
   - API 라우트 기반 구현이 아직 유지되고 있음 (`src/app/api/*`)
   - 파일 구조가 혼합되어 있어 응집도가 낮음
   - 공통 모듈과 도메인 모듈이 명확히 구분되지 않음

3. **Supabase 구현**:
   - `createClient()` 함수가 `src/app/lib/supabase.server.ts`에 구현되어 있음
   - 서버 컴포넌트와 서버 액션 대응을 위한 다양한 클라이언트 생성 방법이 준비됨
   - 일부 API 라우트가 여전히 Supabase 데이터 액세스를 처리하고 있음

4. **데이터베이스 구조**:
   - `boards`, `posts`, `comments` 등 커뮤니티 관련 테이블 구성
   - `shop_items`, `item_purchases` 등 상점 관련 테이블 존재
   - 사용자 프로필, 포인트, 경험치 등 관리 시스템 구현

## 마이그레이션 전략

### 1. 점진적 접근법 (추천)

다음과 같은 순서로 점진적 마이그레이션을 진행하는 것이 좋습니다:

#### 1단계: 기반 구조 강화
- `src/shared/api/supabase.ts` 파일 생성 및 기본 클라이언트 구현
- `src/shared/api/supabaseServer.ts` 서버 컴포넌트용 클라이언트 구현
- 도메인별 `actions.ts` 파일 기본 구조 설정

#### 2단계: 도메인별 서버 액션 구현
- 각 도메인 디렉토리에 서버 액션 파일 추가 (boards, auth, shop 등)
- 가장 중요한 기능부터 API 라우트를 서버 액션으로 대체
  - 게시판 목록/상세 조회
  - 게시글 작성/수정/삭제
  - 댓글 기능
  - 인증 관련 기능

#### 3단계: 클라이언트 컴포넌트 조정
- 기존 API 호출을 서버 액션 호출로 대체
- 페이지 컴포넌트를 가능한 서버 컴포넌트로 전환
- 상태 관리/폼 처리 등 클라이언트 로직 분리

#### 4단계: 공통 유틸리티 및 훅 이전
- `app/utils`, `app/hooks` 등의 공통 모듈을 `shared` 디렉토리로 이전
- 클라이언트 컴포넌트 전용 훅과 서버 컴포넌트 유틸을 명확히 분리

#### 5단계: API 라우트 제거
- 모든 API 라우트 기능이 서버 액션으로 대체되면 `src/app/api` 디렉토리 제거
- 참조되는 모든 API 경로가 제거되었는지 확인

### 2. 우선순위 결정

다음 기준으로 마이그레이션 우선순위를 결정합니다:

1. **중요도**: 핵심 기능(게시판, 인증)부터 마이그레이션
2. **복잡도**: 단순한 기능부터 시작하여 복잡한 기능으로 확장
3. **종속성**: 다른 기능에 영향이 적은 모듈부터 작업

## 구체적인 구현 예시

### 1. 공통 Supabase 클라이언트 설정

```typescript
// src/shared/api/supabase.ts
'use client'

import { createBrowserClient } from '@supabase/ssr'
import { Database } from '@/types/supabase'

export const createClient = () => {
  return createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

```typescript
// src/shared/api/supabaseServer.ts
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import { Database } from '@/types/supabase'

export const createServerComponentClient = () => {
  const cookieStore = cookies()
  
  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name) {
          return cookieStore.get(name)?.value
        }
      }
    }
  )
}
```

### 2. 게시판 서버 액션 구현 예시

```typescript
// src/domains/boards/actions.ts
'use server'

import { createServerComponentClient } from '@/shared/api/supabaseServer'
import { revalidatePath } from 'next/cache'

// 게시판 목록 조회
export async function getBoards() {
  const supabase = createServerComponentClient()
  
  const { data, error } = await supabase
    .from('boards')
    .select('id, name, parent_id, display_order, slug, team_id, league_id')
    .order('display_order', { ascending: true })
    .order('name')
  
  if (error) throw new Error('게시판 목록 조회 실패')
  return data
}

// 게시글 생성
export async function createPost(formData: FormData) {
  const title = formData.get('title') as string
  const content = formData.get('content') as string
  const boardId = formData.get('boardId') as string
  
  if (!title || !content || !boardId) {
    throw new Error('필수 입력값이 누락되었습니다')
  }
  
  const supabase = createServerComponentClient()
  
  // 현재 사용자 확인
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) throw new Error('로그인이 필요합니다')
  
  // 게시글 작성
  const { data, error } = await supabase
    .from('posts')
    .insert({
      title,
      content: JSON.parse(content),
      user_id: user.id,
      board_id: boardId
    })
    .select()
    .single()
  
  if (error) throw new Error('게시글 작성 실패')
  
  // 캐시 갱신
  revalidatePath(`/boards/${boardId}`)
  
  return data
}
```

### 3. 서버 컴포넌트 구현 예시

```tsx
// src/app/boards/[slug]/page.tsx
import { getBoards } from '@/domains/boards/actions'
import { Suspense } from 'react'
import BoardsList from './components/BoardsList'
import BoardLoadingSkeleton from './components/BoardLoadingSkeleton'

export default async function BoardsPage({ params }: { params: { slug?: string } }) {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">게시판</h1>
      
      <Suspense fallback={<BoardLoadingSkeleton />}>
        <BoardsList slug={params.slug} />
      </Suspense>
    </div>
  )
}
```

```tsx
// src/app/boards/[slug]/components/BoardsList.tsx
import { getBoards } from '@/domains/boards/actions'

export default async function BoardsList({ slug }: { slug?: string }) {
  const boards = await getBoards()
  
  // 게시판 데이터 가공 및 표시 로직
  return (
    <div>
      {/* 게시판 목록 표시 */}
    </div>
  )
}
```

## 권장 마이그레이션 순서

다음 순서로 마이그레이션하는 것을 권장합니다:

1. **게시판/게시글 기능**
   - `src/domains/boards/actions.ts` 서버 액션 구현
   - 게시판 목록, 게시글 작성, 조회, 수정, 삭제 기능 마이그레이션
   - 관련 클라이언트 컴포넌트의 API 호출을 서버 액션으로 교체

2. **인증 관련 기능**
   - `src/domains/auth/actions.ts` 서버 액션 구현
   - 로그인, 회원가입, 비밀번호 재설정 등 마이그레이션

3. **상점 기능**
   - `src/domains/shop/actions.ts` 서버 액션 구현
   - 상품 목록, 구매 기능 마이그레이션

4. **라이브스코어**
   - 새로운 도메인 디렉토리 생성: `src/domains/livescore/`
   - 관련 서버 액션 및 컴포넌트 마이그레이션

## 결론 및 주의사항

1. **점진적 마이그레이션이 핵심**
   - 한 번에 모든 것을 변경하려 하지 말고 도메인별로 단계적 접근
   - 각 단계마다 테스트 진행

2. **서버 액션과 서버 컴포넌트 이해**
   - 서버 액션은 폼 제출, 데이터 변경 등 부수 효과가 있는 작업에 사용
   - 서버 컴포넌트는 데이터 조회와 UI 렌더링에 사용

3. **params 비동기 처리 주의**
   - App Router에서 params는 비동기 컨텍스트에서 해결되므로 await 필요
   - `const params = await ...` 형태로 처리

4. **마이그레이션 후 테스트 필수**
   - 각 기능 마이그레이션 후 동작 여부 검증
   - 클라이언트 상태와 서버 상태 동기화 확인

토스 코드 품질 가이드를 고려한 이 접근법은 코드 응집도를 높이고 유지보수성을 개선하는 동시에, 보안과 성능 측면에서도 이점을 제공할 것입니다.

