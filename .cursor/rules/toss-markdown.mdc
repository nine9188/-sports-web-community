---
description: 
globs: 
alwaysApply: true
---
# 🧑‍💻 토스 프론트엔드 코드 스타일 가이드 정리

> 이 문서는 [토스 공식 코드 퀄리티 가이드](https://frontend-fundamentals.com/code-quality/code/) 및 [Cursor Rule Gist](https://gist.github.com/toy-crane/dde6258997519d954063a536fc72d055)를 바탕으로 작성되었습니다.

---

## ✅ 1. 가독성 (Readability)

| 원칙                | 설명 및 예시 |
|---------------------|--------------|
| **매직넘버 명명**   | `const ANIMATION_DELAY_MS = 300;` 처럼 의미 있는 이름으로 대체 |
| **구현 상세 추상화** | 복잡한 로직은 별도 컴포넌트/훅으로 추출 (예: `AuthGuard`, `InviteButton`) |
| **조건 분기 분리**   | 역할별로 컴포넌트 나눔 (예: `ViewerSubmitButton`, `AdminSubmitButton`) |
| **삼항 연산자 제거** | 복잡한 삼항은 IIFE 또는 `if/else`로 전환 |
| **로직 근처 정의**   | 정책 객체, switch문 등은 코드 흐름과 함께 배치 |
| **조건 이름 붙이기** | 복잡한 조건식은 명확한 변수로 추상화 (`isSameCategory`, `isPriceInRange`) |

---

## 🎯 2. 예측 가능성 (Predictability)

| 원칙                        | 설명 |
|-----------------------------|------|
| **반환 타입 통일**          | 훅은 `UseQueryResult<T>` 등 동일한 형태 유지 |
| **숨은 로직 드러내기**      | 사이드 이펙트는 호출자 책임으로 분리 (ex: fetch → log → sync) |
| **명확한 이름 사용**        | `getWithAuth`, `httpService`처럼 기능이 명확히 드러나도록 작성 |

---

## 🧩 3. 응집도 (Cohesion)

| 원칙                        | 설명 |
|-----------------------------|------|
| **폴더 구조 정리**          | 도메인 중심 구조 추천 (`domains/user/components/UserProfileCard.tsx`) |
| **필드 vs 폼 유효성 분리**  | field-level: 독립 검증 / form-level: 전체 검증 스키마 사용 |
| **매직넘버 제거**           | 상수 선언 후 관련 로직 근처 배치 또는 명확한 명칭 사용 |

---

## 🔗 4. 결합도 (Coupling)

| 원칙                         | 설명 |
|------------------------------|------|
| **작은 단위로 상태 관리**    | `useCardIdQueryParam`, `useDateRangeQueryParam`처럼 관심사 분리 |
| **props drilling 제거**     | composition 방식으로 구성 (중간 컴포넌트 생략하고 직접 렌더링) |
| **중복 허용**                | premature abstraction보다 duplication을 선택해 결합도 낮춤 |

---

## 🧠 적용 팁

- 복잡한 조건은 **이름 붙이기**
- 추상화보다 **중복**을 감수해 **결합도 낮추기**
- 훅은 작은 관심사 단위로 쪼개고 명확하게 네이밍
- Context보다 **컴포넌트 composition**을 우선 고려

---

> 참고 문서:
> - https://frontend-fundamentals.com/code-quality/code/
> - https://gist.github.com/toy-crane/dde6258997519d954063a536fc72d055
